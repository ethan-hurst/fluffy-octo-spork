Metadata-Version: 2.4
Name: polymarket-analyzer
Version: 0.1.0
Summary: Analyze Polymarket prediction markets for high-value opportunities
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: rich>=13.0.0
Requires-Dist: click>=8.0.0
Requires-Dist: newsapi-python>=0.2.6
Requires-Dist: httpx>=0.25.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: license-file

# Polymarket Analyzer

A sophisticated console application that analyzes Polymarket prediction markets to identify high-value betting opportunities by combining market data with current news events and tracking prediction performance over time.

## Features

### ðŸ“Š Market Analysis
- **Real-time Market Data**: Fetches live market data from Polymarket's CLOB API
- **Fair Value Calculation**: Estimates fair prices using news sentiment, time factors, and market fundamentals
- **Opportunity Scoring**: Multi-dimensional scoring system considering value, confidence, volume, timing, and news relevance
- **Risk Assessment**: Categorizes opportunities by risk level (LOW/MEDIUM/HIGH)

### ðŸ“° News Integration
- **Current Events Monitoring**: Automatically fetches relevant news from NewsAPI
- **Smart Correlation**: Matches news articles with related prediction markets using keyword analysis
- **Sentiment Analysis**: Basic sentiment analysis to adjust fair value calculations
- **Breaking News Detection**: Identifies emerging trends from clustered news articles

### ðŸ“ˆ Performance Tracking
- **Prediction Logging**: Automatically tracks high-confidence predictions for hit rate analysis
- **Performance Metrics**: Comprehensive analytics including hit rate, ROI, and confidence calibration
- **Historical Analysis**: View predictions by time period, risk level, and confidence buckets
- **CSV Export**: Export prediction data for external analysis

### ðŸ’» Interactive Console Interface
- **Rich Display**: Beautiful tables and formatted output using Rich library
- **Real-time Analysis**: Run market analysis on demand
- **Detailed Views**: Drill down into specific opportunities for detailed analysis
- **Command-line Interface**: Simple commands for all functionality

## Installation

### Prerequisites
- Python 3.11 or higher
- Git

### Setup Steps

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd fluffy-octo-spork
   ```

2. **Create virtual environment**
   ```bash
   python -m venv venv_linux
   source venv_linux/bin/activate  # On Windows: venv_linux\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -e ".[dev]"
   ```

4. **Configure API keys**
   ```bash
   cp .env.example .env
   ```
   
   Edit `.env` and add your API keys:
   ```bash
   # Required: Get free API key from https://newsapi.org/register
   NEWS_API_KEY=your_newsapi_key_here
   
   # Optional: Polymarket API key (for advanced features)
   POLYMARKET_API_KEY=your_polymarket_api_key_here
   ```

## Usage

### Starting the Application

```bash
# Activate virtual environment
source venv_linux/bin/activate

# Run the application
python main.py
```

### Available Commands

#### Analysis Commands
- `analyze` - Run complete market analysis
- `top` - Show top opportunities from last analysis
- `details <id>` - Show detailed analysis for specific opportunity
- `refresh` - Clear cache and run fresh analysis

#### Tracking Commands
- `metrics` - Show prediction performance metrics
- `predictions [days]` - Show recent predictions (default: 30 days)
- `export <filename>` - Export predictions to CSV file
- `resolve <id> <outcome>` - Manually resolve prediction (YES/NO/INVALID)

#### General Commands
- `help` - Show command menu
- `quit` - Exit application

### Example Workflow

1. **Run initial analysis**
   ```
   > analyze
   ```

2. **View top opportunities**
   ```
   > top
   ```

3. **Get details on specific opportunity**
   ```
   > details 1
   ```

4. **Check prediction performance**
   ```
   > metrics
   ```

5. **Export prediction history**
   ```
   > export my_predictions.csv
   ```

## Configuration

### Environment Variables

| Variable | Required | Default | Description |
|----------|----------|---------|-------------|
| `NEWS_API_KEY` | Yes | - | NewsAPI.org API key |
| `POLYMARKET_API_KEY` | No | - | Polymarket API key |
| `LOG_LEVEL` | No | `INFO` | Logging level |
| `CACHE_TTL_SECONDS` | No | `300` | Cache TTL in seconds |
| `RATE_LIMIT_CALLS` | No | `10` | Rate limit calls per period |
| `RATE_LIMIT_PERIOD` | No | `60` | Rate limit period in seconds |
| `MIN_MARKET_VOLUME` | No | `1000` | Minimum market volume to consider |
| `MIN_PROBABILITY_SPREAD` | No | `0.1` | Minimum probability spread for opportunities |
| `MAX_MARKETS_TO_ANALYZE` | No | `100` | Maximum number of markets to analyze |

### Analysis Parameters

The analyzer uses several parameters to identify opportunities:

- **Minimum Volume**: Markets below this volume threshold are filtered out
- **Minimum Spread**: Only opportunities with significant price discrepancies are considered
- **Confidence Threshold**: Only predictions with â‰¥60% confidence are tracked
- **Overall Score Threshold**: Only opportunities with â‰¥50% overall score are logged

## How It Works

### Market Analysis Process

1. **Data Collection**
   - Fetch active markets from Polymarket CLOB API
   - Retrieve current market prices and metadata
   - Collect relevant news articles from NewsAPI

2. **Fair Value Calculation**
   - Analyze news sentiment related to each market
   - Apply time decay factors based on resolution date
   - Consider category-specific adjustments
   - Calculate fair YES/NO probabilities

3. **Opportunity Identification**
   - Compare market prices with fair value estimates
   - Calculate expected returns and profit potential
   - Score opportunities across multiple dimensions
   - Filter by minimum thresholds

4. **Prediction Tracking**
   - Log high-confidence predictions automatically
   - Track outcomes when markets resolve
   - Calculate performance metrics over time

### Scoring System

Each opportunity receives scores across five dimensions:

- **Value Score (30% weight)**: Magnitude of price discrepancy
- **Confidence Score (25% weight)**: Based on news volume, time factors, and market maturity
- **Volume Score (20% weight)**: Market liquidity and trading activity
- **Time Score (15% weight)**: Time until market resolution
- **News Relevance Score (10% weight)**: Quality and relevance of related news

## Data Storage

The application stores data locally in the `data/` directory:

- `predictions.jsonl` - Line-delimited JSON file with all predictions
- `performance_metrics.json` - Latest performance metrics
- Log files in the root directory

## API Limitations

### NewsAPI
- Free tier: 1,000 requests per day
- Rate limiting implemented to respect limits
- Focused on English language sources

### Polymarket
- Public endpoints available without authentication
- Private endpoints require API keys and signatures
- Rate limiting to prevent abuse

## Troubleshooting

### Common Issues

1. **"NEWS_API_KEY not configured"**
   - Get a free API key from https://newsapi.org/register
   - Add it to your `.env` file

2. **"No active markets found"**
   - Check internet connection
   - Verify Polymarket API is accessible
   - Try refreshing with `refresh` command

3. **Import errors**
   - Ensure virtual environment is activated
   - Reinstall dependencies: `pip install -e ".[dev]"`

4. **Rate limiting errors**
   - Wait for rate limit reset
   - Adjust rate limit settings in `.env`

### Logging

The application logs to both console and file:
- Console: INFO level and above
- File: `polymarket_analyzer.log` with all levels

## Security Considerations

- API keys are stored in environment variables, not code
- No sensitive data is logged
- Rate limiting prevents API abuse
- Input validation on all user commands

## Contributing

1. Follow the existing code style and patterns
2. Add type hints to all functions
3. Include docstrings for new classes and methods
4. Write unit tests for new functionality
5. Update this README for new features

## Disclaimer

This tool is for educational and research purposes only. 

- **Not Financial Advice**: The analysis provided by this tool should not be considered financial advice
- **No Guarantee**: Past performance does not guarantee future results
- **Risk Warning**: Prediction markets involve risk and you may lose money
- **Beta Software**: This is experimental software that may contain bugs

Always do your own research and never invest more than you can afford to lose.

## License

MIT License - see LICENSE file for details.
